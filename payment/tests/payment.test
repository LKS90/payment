<?php

/**
 * @file
 * Tests for payment.module.
 */

/**
 * Tests action hook invocations.
 */
class PaymentActionHookTest extends DrupalWebTestCase {

  static function getInfo() {
    return array(
      'name' => 'Action hook invocations',
      'group' => 'Payment',
    );
  }

  function setUp() {
    parent::setUp('payment_test', 'paymentmethodbasic');
  }

  /**
   * Test whether hook_payment_validate() is invoked.
   */
  function testHookPaymentValidate() {
    $payment_method = new PaymentMethod(array(
      'controller' => payment_method_controller_load('PaymentMethodBasicController'),
    ));
    $payment = new Payment(array(
      'method' => $payment_method,
      'amount' => 1,
      'finish_callback' => 'payment_test_finish_callback',
    ));
    $payment->execute();
    $this->assertTrue(isset($payment->payment_test_payment_validate), t('hook_payment_validate() is invoked when validating a payment before execution.'));
    $this->assertTrue(isset($payment->payment_test_payment_pre_execute), t('hook_payment_pre_execute() is invoked before executing a payment.'));
    $this->assertTrue(isset($payment->payment_test_payment_status_change), t('hook_payment_status_change() is invoked before executing a payment.'));
  }
}

/**
 * Tests info hook return values.
 */
class PaymentInfoHookTest extends DrupalWebTestCase {

  static function getInfo() {
    return array(
      'name' => 'Info hook data',
      'group' => 'Payment',
    );
  }

  function setUp() {
    parent::setUp($this->modules());
  }

  /**
   * Return modules whose hook implementations should be tested.
   *
   * @return array
   */
  function modules() {
    return array('payment', 'paymentmethodbasic');
  }

  /**
   * Test hook_payment_method_controller_info().
   */
  function testHookPaymentMethodControllerInfo() {
    $module_info = system_get_info('module');
    foreach ($this->modules() as $module) {
      if ($controller_info = module_invoke($module, 'payment_method_controller_info')) {
        foreach ($controller_info as $controller_name) {
          $valid = TRUE;
          if (!is_string($controller_name)) {
            $valid = FALSE;
            break;
          }
        }
        $this->assertTrue($valid, t("%module's hook_payment_method_controller_info() implementation returns strings.", array(
          '%module' => $module_info[$module]['name'],
        )));
      }
    }
  }

  /**
   * Test hook_payment_method_controller_info().
   */
  function testHookPaymentStatusInfo() {
    $module_info = system_get_info('module');
    foreach ($this->modules() as $module) {
      if ($status_info = module_invoke($module, 'payment_status_info')) {
        $status_info = module_invoke($module, 'payment_status_info');
        foreach ($status_info as $status) {
          $valid = TRUE;
          if (!is_a($status, 'PaymentStatus')) {
            $valid = FALSE;
            break;
          }
        }
        $this->assertTrue($valid, t("%module's hook_payment_status_info() implementation returns PaymentStatus objects.", array(
          '%module' => $module_info[$module]['name'],
        )));
      }
    }
  }
}