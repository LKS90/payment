<?php

/**
 * @file
 * Tests for payment.module.
 */

/**
 * Tests action hook and callback invocations.
 */
class PaymentActionHookAndCallbackTest extends DrupalWebTestCase {

  static function getInfo() {
    return array(
      'name' => 'Action hook and callback invocations',
      'group' => 'Payment',
    );
  }

  function setUp() {
    parent::setUp('payment_test', 'paymentmethodbasic');
  }

  /**
   * Test whether hook_payment_validate() is invoked.
   */
  function testActionHooksAndCallbacks() {
    $payment_method = new PaymentMethod(array(
      'controller' => payment_method_controller_load('PaymentMethodBasicController'),
    ));
    $payment = new Payment(array(
      'method' => $payment_method,
      'finish_callback' => 'payment_test_finish_callback',
    ));
    $payment->setLineItem(new PaymentLineItem(array(
      'name' => 'payment_test',
      'amount' => 1,
    )));
    $validation = FALSE;
    try {
      $payment->payment_test_payment_validate = TRUE;
      $payment_method->validate($payment);
    }
    catch (PaymentValidationException $e) {
      $validation = $e->getMessage() == 'payment_test';
    }
    unset($payment->payment_test_payment_validate);
    $this->assertTrue($validation, 'hook_payment_validate() is invoked when validating a payment before execution.');
    $payment->execute();
    $this->assertTrue(isset($payment->payment_test_payment_pre_execute), 'hook_payment_pre_execute() is invoked before executing a payment.');
    $this->assertTrue(isset($payment->payment_test_payment_status_change), 'hook_payment_status_change() is invoked before executing a payment.');
    $this->assertTrue(isset($payment->payment_test_finish_callback), 'The finish callback is invoked after executing a payment.');
  }
}

/**
 * Tests info hook return values.
 */
class PaymentInfoHookTest extends DrupalWebTestCase {

  static function getInfo() {
    return array(
      'name' => 'Info hook data',
      'group' => 'Payment',
    );
  }

  function setUp() {
    parent::setUp($this->modules());
  }

  /**
   * Return modules whose hook implementations should be tested.
   *
   * @return array
   */
  function modules() {
    return array('payment', 'paymentform', 'paymentmethodbasic');
  }

  /**
   * Test hook_payment_method_controller_info().
   */
  function testHookPaymentMethodControllerInfo() {
    $module_info = system_get_info('module');
    foreach ($this->modules() as $module) {
      if ($controller_info = module_invoke($module, 'payment_method_controller_info')) {
        foreach ($controller_info as $controller_name) {
          $valid = TRUE;
          if (!is_string($controller_name)) {
            $valid = FALSE;
            break;
          }
        }
        $this->assertTrue($valid, $module_info[$module]['name'] . 's hook_payment_method_controller_info() implementation returns strings.');
      }
    }
  }

  /**
   * Test hook_payment_method_controller_info().
   */
  function hookThatReturnsObjects($hook, $class_name) {
    $module_info = system_get_info('module');
    foreach ($this->modules() as $module) {
      if ($infos = module_invoke($module, $hook)) {
        foreach ($infos as $info) {
          $valid = TRUE;
          if (!is_a($info, $class_name)) {
            $valid = FALSE;
            break;
          }
        }
        $this->assertTrue($valid, $module . '_' . $hook . '() returns ' . $class_name . ' objects.');
      }
    }
  }

  /**
   * Test hook_payment_method_controller_info().
   */
  function testHookPaymentStatusInfo() {
    $this->hookThatReturnsObjects('payment_status_info', 'PaymentStatusInfo');
  }

  /**
   * Test hook_payment_method_controller_info().
   */
  function testHookPaymentLineItemInfo() {
    $this->hookThatReturnsObjects('payment_line_item_info', 'PaymentLineItemInfo');
  }
}

/**
 * Test line item handling.
 */
class PaymentLineItemTest extends DrupalWebTestCase {

  static function getInfo() {
    return array(
      'name' => 'Payment line item handling',
      'group' => 'Payment',
    );
  }

  function setUp() {
    parent::setUp('payment_test');
  }

  /**
   * Test line item handling.
   */
  function testPaymentLineItemHandling() {
    $payment = new Payment;
    $payment->setLineItem(new PaymentLineItem(array(
      'name' => 'foo',
      'amount' => 19.11,
      'tax_rate' => 0.1,
    )));

    // Test Payment::setLineItem();
    $this->assertTrue($payment->line_items['foo']->name == 'foo', 'Payment::setLineItem() adds a PaymentLineItem object to Payment::line_items.');

    // Test Payment::unitAmount() without tax.
    $this->assertTrue($payment->line_items['foo']->unitAmount(FALSE) == 19.11, 'Payment::unitAmount() returns amount excluding tax.');

    // Test Payment::unitAmount() with tax.
    $this->assertTrue($payment->line_items['foo']->unitAmount(TRUE) == 21.021, 'Payment::unitAmount() returns amount including tax.');

    // Test Payment::totalAmount() without tax.
    $this->assertTrue($payment->totalAmount(FALSE) == 19.11, 'Payment::totalAmount() returns amount excluding tax.');

    $payment->setLineItem(new PaymentLineItem(array(
      'name' => 'bar',
      'amount' => 19.78,
    )));

    // Test Payment::totalAmount() without passed on amounts.
    $this->assertTrue($payment->totalAmount(TRUE) == 40.801, 'Payment::totalAmount() adds up Payment::line_items.');

    $payment->setLineItem(new PaymentLineItem(array(
      'name' => 'beer',
      'amount' => 47.11,
    )));

    // Test Payment::totalAmount() with passed on amounts.
    $line_items = $payment->getLineItems('payment_test');
    $this->assertTrue($payment->totalAmount(TRUE, $line_items) == 40.801, 'Payment::totalAmount() adds up only passed on line items.');

    // Test payment_line_item_get_specific() and whether
    // Payment::getLineItems() can get line items that are not exposed
    // through hook_payment_line_item_info().
    $line_items = $payment->getLineItems('beer');
    $this->assertTrue($payment->totalAmount(TRUE, $line_items) == 47.11, 'payment_line_item_get_specific() only returns the requested line item.');

    // Test payment_line_item_get_all().
    $line_items = $payment->getLineItems('payment_all');
    $this->assertTrue(count($line_items) == 3, 'payment_line_item_get_all() returns all line items.');
  }
}

/**
 * Test payment status item handling.
 */
class PaymentStatusItemTest extends DrupalWebTestCase {

  static function getInfo() {
    return array(
      'name' => 'Payment status item handling',
      'group' => 'Payment',
    );
  }

  /**
   * Implements DrupalWebTestCase::setUp().
   */
  function setUp() {
    parent::setUp('payment');
  }

  /**
   * Test payment status item handling.
   */
  function testPaymentStatusItem() {
    $payment = new Payment;
    $status_pending = new PaymentStatusItem(PAYMENT_STATUS_PENDING);
    $status_success = new PaymentStatusItem(PAYMENT_STATUS_SUCCESS);
    $payment->setStatus($status_pending);
    $payment->setStatus($status_success);
    $this->assertTrue($payment->getStatus() === $status_success, 'Payment::setStatus() sets status items in the right order and Payment::getStatus() retrieves them.');
  }
}