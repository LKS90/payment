<?php

/**
 * @file
 * Tests for payment.module.
 */

/**
 * Tests CRUD behavior.
 */
class PaymentBillingCRUDTest extends DrupalWebTestCase {

  static function getInfo() {
    return array(
      'name' => 'CRUD behavior',
      'group' => 'Payment Billing',
    );
  }

  function setUp() {
    parent::setUp('paymentbilling');
  }

  /**
   * Test CRUD behavior.
   */
  function testCRUDBehavior() {
    $payment_method = new PaymentMethod(array(
      'controller' => payment_method_controller_load('PaymentMethodControllerUnavailable'),
    ));
    entity_save('payment_method', $payment_method);
    $payment = new Payment(array(
      'method' => $payment_method,
      'billing' => new PaymentBilling(array(
        'first_name' => 'Blue',
      )),
    ));
    $payment->setAmount('paymentbilling', 1);
    entity_save('payment', $payment);

    // Test save.
    $first_name = db_select('paymentbilling')
      ->fields('paymentbilling', array('first_name'))
      ->condition('pid', $payment->pid)
      ->execute()
      ->fetchfield();
    $this->assertTrue($first_name === 'Blue', t('Billing information is saved together with a payment.'));

    // Test update.
    $payment->billing->first_name = 'Smurf';
    entity_save('payment', $payment);
    $first_name = db_select('paymentbilling')
      ->fields('paymentbilling', array('first_name'))
      ->condition('pid', $payment->pid)
      ->execute()
      ->fetchfield();
    $this->assertTrue($first_name === 'Smurf', t('Billing information is updated together with a payment.'));
    
    // Test load.
    db_update('paymentbilling')
      ->fields(array(
        'first_name' => 'Druplicon',
      ))
      ->condition('pid', $payment->pid)
      ->execute();
    $payment = entity_load_single('payment', $payment->pid);
    $this->assertTrue($payment->billing->first_name === 'Druplicon', t('Billing information is loaded together with a payment.'));

    // Test delete.
    entity_delete('payment', $payment->pid);
    $count = db_select('paymentbilling')
      ->condition('pid', $payment->pid)
      ->countQuery()
      ->execute()
      ->fetchfield();
    $this->assertTrue($count == 0, t('Billing information is deleted together with a payment.'));
  }
}