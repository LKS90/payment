<?php

/**
 * @file
 * Installation and uninstallation functions.
 */

/**
 * Implements hook_schema().
 */
function payment_schema() {
  $schema['payment_line_item'] = array(
    'fields' => array(
      'amount' => array(
        'type' => 'float',
        'size' => 'big',
        'not null' => TRUE,
      ),
      'amount_total' => array(
        'type' => 'float',
        'size' => 'big',
        'not null' => TRUE,
      ),
      'description' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      'description_arguments' => array(
        'type' => 'blob',
        'size' => 'big',
        'serialize' => TRUE,
      ),
      'name' => array(
        'type' => 'varchar',
        'length' => 255,
      ),
      'pid' => array(
        'description' => 'The {payment}.pid this line item belongs to.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'quantity' => array(
        'type' => 'int',
        'default' => 1,
        'not null' => TRUE,
      ),
      'tax_rate' => array(
        'type' => 'float',
        'size' => 'big',
        'default' => 0.0,
        'not null' => TRUE,
      ),
    ),
    'primary key' => array('name', 'pid'),
    'foreign keys' => array(
      'pid' => array(
        'table' => 'payment',
        'columns' => array(
          'pid' => 'pid',
        ),
      ),
    ),
    'indexes' => array(
      'pid' => array('pid'),
    ),
  );
  $schema['payment'] = array(
    'fields' => array(
      'context' => array(
        'type' => 'varchar',
        'length' => 255,
      ),
      'context_data' => array(
        'type' => 'blob',
        'size' => 'big',
        'serialize' => TRUE,
      ),
      'currency_code' => array(
        'type' => 'varchar',
        'length' => 3,
        'default' => 'XXX',
        'not null' => TRUE,
      ),
      'description' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      'description_arguments' => array(
        'type' => 'blob',
        'size' => 'big',
        'serialize' => TRUE,
        'not null' => TRUE,
      ),
      'finish_callback' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      'pid' => array(
        'type' => 'serial',
      ),
      'pmid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'default' => 0,
        'not null' => TRUE,
      ),
      'psiid_first' => array(
        'description' => "The {payment_status_item}.psiid of this payment's first status item.",
        'type' => 'int',
        'unsigned' => TRUE,
        'default' => 0,
        'not null' => TRUE,
      ),
      'psiid_last' => array(
        'description' => "The {payment_status_item}.psiid of this payment's most recent status item.",
        'type' => 'int',
        'unsigned' => TRUE,
        'default' => 0,
        'not null' => TRUE,
      ),
      'uid' => array(
        'description' => 'The {users}.uid this payment belongs to.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'foreign keys' => array(
      'pmid' => array(
        'table' => 'payment_method',
        'columns' => array(
          'pmid' => 'pmid',
        ),
      ),
      'psiid_last' => array(
        'table' => 'payment_status_item',
        'columns' => array(
          'psiid_last' => 'psiid',
        ),
      ),
      'psiid_first' => array(
        'table' => 'payment_status_item',
        'columns' => array(
          'psiid_first' => 'psiid',
        ),
      ),
      'uid' => array(
        'table' => 'user',
        'columns' => array(
          'uid' => 'uid',
        ),
      ),
    ),
    'indexes' => array(
      'pid' => array('pid'),
    ),
    'primary key' => array('pid'),
  );
  $schema['payment_status_item'] = array(
    'fields' => array(
      'status' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      'created' => array(
        'type' => 'int',
        'not null' => TRUE,
      ),
      'pid' => array(
        'description' => 'The payment ID.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'psiid' => array(
        'type' => 'serial',
      ),
    ),
    'foreign keys' => array(
      'pid' => array(
        'table' => 'payment',
        'columns' => array(
          'pid' => 'pid',
        ),
      ),
    ),
    'indexes' => array(
      'pid' => array('pid'),
    ),
    'primary key' => array('psiid'),
  );
  $schema['payment_method'] = array(
    'fields' => array(
      'controller_class_name' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      'enabled' => array(
        'type' => 'int',
        'size' => 'tiny',
        'default' => 0,
        'not null' => TRUE,
      ),
      'module' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      'name' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      'pmid' => array(
        'type' => 'serial',
      ),
      'status' => array(
        'type' => 'int',
        'size' => 'tiny',
        'default' => ENTITY_CUSTOM,
        'not null' => TRUE,
      ),
      'title_generic' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      'title_specific' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      'uid' => array(
        'description' => 'The {users}.uid this {payment_method} belongs to.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'foreign keys' => array(
      'uid' => array(
        'table' => 'user',
        'columns' => array(
          'uid' => 'uid',
        ),
      ),
    ),
    'primary key' => array('pmid'),
    'unique keys' => array(
      'pmid' => array('pmid'),
    ),
  );

  return $schema;
}

/**
 * Adds the psiid_first field to {payment}.
 */
function payment_update_7100(&$sandbox) {
  // Add the new field.
  db_add_field('payment', 'psiid_first', array(
    'type' => 'int',
    'unsigned' => TRUE,
    'default' => 0,
    'not null' => TRUE,
  ));
  // Populate the field by simply saving it, because a payment's missing
  // psiid_first or psiid_last information is updated automatically.
  foreach (entity_load('payment') as $payment) {
    entity_save('payment', $payment);
  }
}

/**
 * Adds the amount_total field to {payment_line_item}.
 */
function payment_update_7101(&$sandbox) {
  // Add the new field.
  db_add_field('payment_line_item', 'amount_total', array(
    'type' => 'float',
    'size' => 'big',
  ));
  // Populate the field by simply saving it, because a line items's missing
  // amount_total information is updated automatically.
  foreach (entity_load('payment') as $payment) {
    entity_save('payment', $payment);
  }
}

/**
 * Adds the description_arguments field to {payment}.
 */
function payment_update_7102(&$sandbox) {
  db_add_field('payment', 'description_arguments', array(
    'type' => 'blob',
    'size' => 'big',
    'serialize' => TRUE,
    'not null' => TRUE,
  ));
  db_update('payment')
    ->fields(array(
      'description_arguments' => 'a:0:{}',
    ))
    ->execute();
}

/**
 * Sets the exportable status for existing payment methods.
 */
function payment_update_7103(array &$sandbox) {
  db_update('payment_method')
    ->condition('module', 'payment')
    ->fields(array(
      'status' => ENTITY_CUSTOM,
    ))
    ->execute();
}

/**
 * Updates NOT NULL and default value configuration for some database columns.
 */
function payment_update_7104(array &$sandbox) {
  db_change_field('payment', 'currency_code', 'currency_code', array(
    'type' => 'varchar',
    'length' => 3,
    'default' => 'XXX',
    'not null' => TRUE,
  ));
  db_change_field('payment', 'description', 'description', array(
    'type' => 'varchar',
    'length' => 255,
    'not null' => TRUE,
  ));
  db_change_field('payment', 'finish_callback', 'finish_callback', array(
    'type' => 'varchar',
    'length' => 255,
    'not null' => TRUE,
  ));
  db_change_field('payment_line_item', 'amount', 'amount', array(
    'type' => 'float',
    'size' => 'big',
    'not null' => TRUE,
  ));
  db_change_field('payment_line_item', 'amount_total', 'amount_total', array(
    'type' => 'float',
    'size' => 'big',
    'not null' => TRUE,
  ));
  db_change_field('payment_line_item', 'quantity', 'quantity', array(
    'type' => 'int',
    'default' => 1,
    'not null' => TRUE,
  ));
  db_change_field('payment_line_item', 'tax_rate', 'tax_rate', array(
    'type' => 'float',
    'size' => 'big',
    'default' => 0.0,
    'not null' => TRUE,
  ));
  db_change_field('payment_method', 'enabled', 'enabled', array(
    'type' => 'int',
    'size' => 'tiny',
    'default' => 0,
    'not null' => TRUE,
  ));
  db_change_field('payment_method', 'status', 'status', array(
    'type' => 'int',
    'size' => 'tiny',
    'default' => ENTITY_CUSTOM,
    'not null' => TRUE,
  ));
  db_change_field('payment_status_item', 'status', 'status', array(
    'type' => 'varchar',
    'length' => 255,
    'not null' => TRUE,
  ));
  db_change_field('payment_status_item', 'created', 'created', array(
    'type' => 'int',
    'not null' => TRUE,
  ));
}