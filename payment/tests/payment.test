<?php

/**
 * @file
 * Tests for payment.module.
 */

/**
 * Tests action hook and callback invocations.
 */
class PaymentActionHookAndCallbackTest extends DrupalWebTestCase {

  static function getInfo() {
    return array(
      'name' => 'Action hook and callback invocations',
      'group' => 'Payment',
    );
  }

  function setUp() {
    parent::setUp('payment_test', 'paymentmethodbasic');
  }

  /**
   * Test whether hook_payment_validate() is invoked.
   */
  function testActionHooksAndCallbacks() {
    $payment_method = new PaymentMethod(array(
      'controller' => payment_method_controller_load('PaymentMethodBasicController'),
    ));
    $payment = new Payment(array(
      'method' => $payment_method,
      'amount' => 1,
      'finish_callback' => 'payment_test_finish_callback',
    ));
    $payment->execute();
    $this->assertTrue(isset($payment->payment_test_payment_validate), t('hook_payment_validate() is invoked when validating a payment before execution.'));
    $this->assertTrue(isset($payment->payment_test_payment_pre_execute), t('hook_payment_pre_execute() is invoked before executing a payment.'));
    $this->assertTrue(isset($payment->payment_test_payment_status_change), t('hook_payment_status_change() is invoked before executing a payment.'));
    $this->assertTrue(isset($payment->payment_test_finish_callback), t('The finish callback is invoked after executing a payment.'));
  }
}

/**
 * Tests info hook return values.
 */
class PaymentInfoHookTest extends DrupalWebTestCase {

  static function getInfo() {
    return array(
      'name' => 'Info hook data',
      'group' => 'Payment',
    );
  }

  function setUp() {
    parent::setUp($this->modules());
  }

  /**
   * Return modules whose hook implementations should be tested.
   *
   * @return array
   */
  function modules() {
    return array('payment', 'paymentform', 'paymentmethodbasic');
  }

  /**
   * Test hook_payment_method_controller_info().
   */
  function testHookPaymentMethodControllerInfo() {
    $module_info = system_get_info('module');
    foreach ($this->modules() as $module) {
      if ($controller_info = module_invoke($module, 'payment_method_controller_info')) {
        foreach ($controller_info as $controller_name) {
          $valid = TRUE;
          if (!is_string($controller_name)) {
            $valid = FALSE;
            break;
          }
        }
        $this->assertTrue($valid, t("%module's hook_payment_method_controller_info() implementation returns strings.", array(
          '%module' => $module_info[$module]['name'],
        )));
      }
    }
  }

  /**
   * Test hook_payment_method_controller_info().
   */
  function hookThatReturnsObjects($hook, $class_name) {
    $module_info = system_get_info('module');
    foreach ($this->modules() as $module) {
      if ($infos = module_invoke($module, $hook)) {
        foreach ($infos as $info) {
          $valid = TRUE;
          if (!is_a($info, $class_name)) {
            $valid = FALSE;
            break;
          }
        }
        $this->assertTrue($valid, t("%hook returns %class_name objects.", array(
          '%module' => $module_info[$module]['name'],
          '%hook' => $module . '_' . $hook . '()',
          '%class_name' => $class_name,
        )));
      }
    }
  }

  /**
   * Test hook_payment_method_controller_info().
   */
  function testHookPaymentStatusInfo() {
    $this->hookThatReturnsObjects('payment_status_info', 'PaymentStatusInfo');
  }

  /**
   * Test hook_payment_method_controller_info().
   */
  function testHookPaymentAmountInfo() {
    $this->hookThatReturnsObjects('payment_amount_info', 'PaymentAmountInfo');
  }
}

/**
 * Test payment amount item handling.
 */
class PaymentAmountItemTest extends DrupalWebTestCase {

  static function getInfo() {
    return array(
      'name' => 'Payment amount item handling',
      'group' => 'Payment',
    );
  }

  function setUp() {
    parent::setUp('payment_test');
  }

  /**
   * Test payment amount item handling.
   */
  function testPaymentAmountItemHandling() {
    $payment = new Payment;

    // Test Payment::setAmount();
    $payment->setAmount('foo', 19.11);
    $this->assertTrue($payment->amounts['foo']->name == 'foo', t('Payment::setAmount() adds a PaymentAmountItem object to Payment::amounts.'));

    // Test Payment::totalAmount() without passed on amounts.
    $payment->setAmount('bar', 19.78);
    $this->assertTrue($payment->totalAmount() == 38.89, t('Payment::totalAmount() adds up all payment amounts.'));

    // Test Payment::totalAmount() with passed on amounts.
    $payment->setAmount('beer', 47.11);
    $amounts = payment_amount_extract('payment_test', $payment);
    $this->assertTrue($payment->totalAmount($amounts) == 38.89, t('Payment::totalAmount() adds up only passed on payment amounts.'));

    // Test payment_amount_extract_specific() and whether
    // payment_amount_extract() can extract amounts that are not exposed
    // through hook_payment_amount_info()..
    $amounts = payment_amount_extract('beer', $payment);
    $this->assertTrue($payment->totalAmount($amounts) == 47.11, t('payment_amount_extract_specific() only returns the requested amount.'));

    // Test payment_amount_extract_total().
    $amounts = payment_amount_extract('payment_total', $payment);
    $this->assertTrue($payment->totalAmount($amounts) == 86, t('payment_amount_extract_total() returns all amounts.'));
  }
}

/**
 * Test payment status item handling.
 */
class PaymentStatusItemTest extends DrupalWebTestCase {

  static function getInfo() {
    return array(
      'name' => 'Payment status item handling',
      'group' => 'Payment',
    );
  }

  /**
   * Implements DrupalWebTestCase::setUp().
   */
  function setUp() {
    parent::setUp('payment');
  }

  /**
   * Test payment amount item handling.
   */
  function testPaymentStatusItem() {
    $payment = new Payment;
    $status_pending = new PaymentStatusItem(PAYMENT_STATUS_PENDING);
    $status_success = new PaymentStatusItem(PAYMENT_STATUS_SUCCESS);
    $payment->setStatus($status_pending);
    $payment->setStatus($status_success);
    $this->assertTrue($payment->getStatus() === $status_success, t('Payment::setStatus() sets status items in the right order and Payment::getStatus() retrieves them.'));
  }
}