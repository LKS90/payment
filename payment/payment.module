<?php

/**
 * @file
 * Hook implementations and shared functions.
 */

use Drupal\payment\Plugin\Core\Entity\PaymentInterface;
use Drupal\payment\Plugin\payment\line_item\Basic;

// Load include files that contain hooks or callback code.
module_load_include('inc', 'payment', 'payment.ui');

/**
 * The prefix for payment line item tokens.
 */
define('PAYMENT_LINE_ITEM_TOKEN_PREFIX', 'line_item-');

/**
 * Implements hook_init().
 */
function payment_init() {
  // Add administration CSS.
  if (preg_match('#^admin/content/payment#', $_GET['q'])
    || preg_match('#^user/\d+?/payment#', $_GET['q'])) {
    drupal_add_css(drupal_get_path('module', 'payment') . '/css/payment.css');
  }
}

/**
 * Implements hook_module_implements_alter().
 */
function payment_module_implements_alter(array &$implementations, $hook) {
  if ($hook == 'payment_method_load') {
    // Commerce Payment has a function called commerce_payment_method_load(),
    // which looks like Commerce's implementation of
    // hook_payment_method_load(), but in fact is a Commerce Payment CRUD
    // function.
    unset($implementations['commerce']);
  }
}

/**
 * Implements hook_menu().
 *
 * @see payment_views_default_views()
 */
function payment_menu() {
  // Payment pages.
  $items['payment/%entity_object'] = array(
    'load arguments' => array('payment'),
    'title' => 'Payment',
    'title callback' => 'payment_title',
    'title arguments' => array(1),
    'page callback' => 'payment_page_payment_view',
    'page arguments' => array(1),
    'access callback' => 'payment_access',
    'access arguments' => array('view', 1),
    'file' => 'payment.ui.inc',
  );
  $items['payment/%entity_object/view'] = array(
    'load arguments' => array('payment'),
    'title' => 'View',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'weight' => -10,
  );
  $items['payment/%entity_object/edit'] = array(
    'load arguments' => array('payment'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('payment_form_standalone', 1),
    'access callback' => 'payment_access',
    'access arguments' => array('update', 1),
    'title' => 'Edit',
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'weight' => -9,
    'file' => 'payment.ui.inc',
  );
  $items['payment/%entity_object/delete'] = array(
    'load arguments' => array('payment'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('payment_form_payment_delete', 1),
    'access callback' => 'payment_access',
    'access arguments' => array('delete', 1),
    'title' => 'Delete',
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_INLINE,
    'weight' => -8,
    'file' => 'payment.ui.inc',
  );

  // Administration section.
  $items['admin/config/services/payment'] = array(
    'title' => 'Payment',
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('access administration pages'),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );

  // Global configuration.
  $items['admin/config/services/payment/global'] = array(
    'title' => 'Global configuration',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('payment_form_global_configuration'),
    'access arguments' => array('payment.global.administer'),
    'file' => 'payment.ui.inc',
  );

  // Payment methods.
  $items['admin/config/services/payment/method'] = array(
    'route_name' => 'payment.payment_method.list',
    'title' => 'Payment methods',
  );
  $items['admin/config/services/payment/method/%'] = array(
    'route_name' => 'payment.payment_method.edit',
  );

  // Payment status overview.
  $items['admin/config/services/payment/status'] = array(
    'title' => 'Payment statuses',
    'page callback' => 'payment_page_status',
    'access arguments' => array('payment.payment_status.view'),
    'file' => 'payment.ui.inc',
    'weight' => 1,
  );

  return $items;
}

/**
 * Implements hook_local_actions().
 */
function payment_local_actions() {
  $items = array();
  $items[] = array(
    'appears_on' => array('payment.payment_method.list'),
    'route_name' => 'payment.payment_method.select',
    'title' => t('Add payment method'),

  );

  return $items;
}

/**
 * Implement hook_menu_alter().
 */
function payment_menu_alter(&$items) {
  // Make "Manage fields" the default local task.
  if (isset($items['admin/config/services/payment/payment/fields'])) {
    $items['admin/config/services/payment/payment'] = array(
      'title' => 'Payments',
      'type' => MENU_NORMAL_ITEM,
    ) + $items['admin/config/services/payment/payment/fields'];
    $items['admin/config/services/payment/payment/fields'] = array(
      'title' => 'Manage fields',
      'type' => MENU_DEFAULT_LOCAL_TASK,
    );
  }
}

/**
 * Implements hook_permission().
 *
 * @see \Drupal\payment\PaymentMethodAccessController
 */
function payment_permission() {
  $permissions = array(
    'payment.global.administer' => array(
      'title' => t('Administer global Payment configuration'),
    ),
    'payment.rules.administer' => array(
      'title' => t('Administer rule configurations'),
      'restrict access' => TRUE,
    ),
    'payment.payment.administer' => array(
      'title' => t('Administer payment configuration'),
    ),
    'payment.payment.view.any' => array(
      'title' => t('View any payment'),
    ),
    'payment.payment.view.own' => array(
      'title' => t('View own payments'),
    ),
    'payment.payment.update.any' => array(
      'title' => t('Update any payment'),
    ),
    'payment.payment.update.own' => array(
      'title' => t('Update own payments'),
    ),
    'payment.payment.delete.any' => array(
      'title' => t('Delete any payment'),
    ),
    'payment.payment.delete.own' => array(
      'title' => t('Delete own payments'),
    ),
    'payment.payment_method.update.any' => array(
      'title' => t('Update any payment method'),
      'restrict access' => TRUE,
    ),
    'payment.payment_method.update.own' => array(
      'title' => t('Update own payment methods'),
    ),
    'payment.payment_method.delete.any' => array(
      'title' => t('Delete any payment method'),
    ),
    'payment.payment_method.delete.own' => array(
      'title' => t('Delete own payment methods'),
    ),
    'payment.payment_method.view.any' => array(
      'title' => t('View any payment method'),
      'restrict access' => TRUE,
    ),
    'payment.payment_method.view.own' => array(
      'title' => t('View own payment methods'),
    ),
    'payment.payment_status.view' => array(
      'title' => t('View payment status overview'),
    ),
  );
  $definitions = \Drupal::service('plugin.manager.payment.payment_method')->getDefinitions();
  unset($definitions['payment_unavailable']);
  foreach ($definitions as $plugin_id => $definition) {
    $permissions['payment.payment_method.create.' . $plugin_id] = array(
      'title' => t('Create %plugin_label payment methods', array(
        '%plugin_label' => $definition['label'],
      )),
    );
  }

  return $permissions;
}

/**
 * Implements hook_hook_info().
 */
function payment_hook_info() {
  $hooks['payment_context_alter'] = array(
    'group' => 'payment',
  );
  $hooks['payment_line_item_alter'] = array(
    'group' => 'payment',
  );
  $hooks['payment_method_alter'] = array(
    'group' => 'payment',
  );
  $hooks['payment_operation_access'] = array(
    'group' => 'payment',
  );
  $hooks['payment_pre_operation'] = array(
    'group' => 'payment',
  );
  $hooks['payment_pre_resume'] = array(
    'group' => 'payment',
  );
  $hooks['payment_status_alter'] = array(
    'group' => 'payment',
  );
  $hooks['payment_status_set'] = array(
    'group' => 'payment',
  );

  return $hooks;
}

/**
 * Implements hook_field_extra_fields().
 */
function payment_field_extra_fields() {
  $field['payment']['payment'] = array(
    'form' => array(
      'payment_line_items' => array(
        'label' => t('Line items'),
        'weight' => 0,
      ),
      'payment_method' => array(
        'label' => t('Payment method selection and configuration'),
        'weight' => 0,
      ),
      'payment_status' => array(
        'label' => t('Status'),
        'weight' => 0,
      ),
    ),
    'display' => array(
      'payment_line_items' => array(
        'label' => t('Line items'),
        'weight' => 0,
      ),
      'payment_method' => array(
        'label' => t('Payment method (generic title)'),
        'weight' => 0,
      ),
      'payment_status_items' => array(
        'label' => t('Status items'),
        'weight' => 0,
      ),
    ),
  );

  return $field;
}

/**
 * Implements hook_element_info().
 */
function payment_element_info() {
  // A payment method selection and configuration element. Every form this
  // element is used in should have a Payment object in $form_state['payment'].
  $elements['payment_method'] = array(
    '#input' => TRUE,
    '#process' => array('payment_form_process_method'),
    '#element_validate' => array('payment_form_process_method_validate'),
    // An array with IDs of the allowed payment methods. Leave empty to allow
    // all. If just a single value is given, or if only ony payment method is
    // valid, the element will not expand to a select list, but will appear to
    // the user as if there only is one payment method available at all.
    '#pmids' => array(),
  );
  // Line item configuration. Use
  // \Drupal\payment\FormElement\PaymentLineItem::getLineItems() to get the
  // 'return' value.
  $elements['payment_line_items'] = array(
    '#attached' => array(
      'css' => array(drupal_get_path('module', 'payment') . '/css/payment.css'),
    ),
    // The number of values this element allows, which must be at least as much
    // as the number of line items in the default value. Enter 0 for unlimited.
    '#cardinality' => 0,
    // An array of
    // \Drupal\payment\Plugin\payment\line_item\PaymentLineItemInterface
    // objects.
    '#default_value' => array(),
    '#element_validate' => array(array('\Drupal\payment\FormElement\PaymentLineItem', 'validate')),
    '#input' => TRUE,
    '#process' => array('form_process_container', array('\Drupal\payment\FormElement\PaymentLineItem', 'process')),
    '#tree' => TRUE,
    '#theme_wrappers' => array('container'),
    '#value' => array(),
  );
  // Placeholder element for a payment method controller's payment or payment
  // method form elements callback. Using this element ensures the callbacks
  // receive enough contextual information.
  $elements['payment_form_context'] = array(
    '#tree' => TRUE,
    '#process' => array('payment_form_process_context'),
    // The class name of the payment method controller whose callbacks to call.
    '#payment_method_controller_name' => '',
    // Either "payment" or "payment_method".
    '#callback_type' => '',
  );

  return $elements;
}

/**
 * Implements hook_ENTITY_TYPE_load().
 */
function payment_payment_load(array $payments) {
  foreach ($payments as $payment) {
    // Load payment_basic-specific line item data.
    foreach ($payment->getLineItems() as $line_item) {
      if ($line_item instanceof Basic) {
        $line_item->loadData();
      }
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_insert().
 */
function payment_payment_insert(PaymentInterface $payment) {
  // Save payment_basic-specific line item data.
  foreach ($payment->getLineItems() as $line_item) {
    if ($line_item instanceof Basic) {
      $line_item->saveData();
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_update().
 */
function payment_payment_update(PaymentInterface $payment) {
  // Save payment_basic-specific line item data.
  foreach ($payment->getLineItems() as $line_item) {
    if ($line_item instanceof Basic) {
      $line_item->saveData();
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_delete().
 */
function payment_payment_delete(PaymentInterface $payment) {
  // Delete payment_basic-specific line item data.
  foreach ($payment->getLineItems() as $line_item) {
    if ($line_item instanceof Basic) {
      $line_item->deleteData();
    }
  }
}

/**
 * Check if a user has access to perform a certain payment method operation and
 * do additional token validation.
 *
 * @see payment_method_access
 *
 * @param string $token
 *   A token to validate, that was generated with value "payment_method".
 * @param string $operation
 * @param PaymentMethod $payment_method
 * @param stdClass $account
 */
function payment_method_access_token($token, $operation, PaymentMethod $payment_method = NULL, $account = NULL) {
  return drupal_valid_token($token, 'payment') && payment_method_access($operation, $payment_method, $account);
}

/**
 * Log/show a debugging message.
 *
 * @param string $message
 *   The unstranslated US English message to process.
 * @param string $file
 *   The path to the file the message originates from.
 * @param integer $line
 *   The number of the line within $file the message originates from.
 *
 * @return NULL
 */
function payment_debug($message, $file = '', $line = 0) {
  if (variable_get('payment_debug', TRUE)) {
    // Make sure we have file and line information.
    if (!$file || !$line) {
      // Get the backtrace as fast as possible.
      if (version_compare(phpversion(), '5.3.6') == -1) {
        $backtrace = debug_backtrace(FALSE);
      }
      elseif (version_compare(phpversion(), '5.4.0') > -1) {
        $backtrace = debug_backtrace(DEBUG_BACKTRACE_IGNORE_ARGS, 0);
      }
      else {
        $backtrace = debug_backtrace(DEBUG_BACKTRACE_IGNORE_ARGS);
      }

      // Distill the caller's file and line information from the backtrace.
      $caller = _drupal_get_last_caller($backtrace);
      if (!$file) {
        $file = $caller['file'];
      }
      if (!$line) {
        $line = $caller['line'];
      }
    }

    // Process the actual message.
    $link = l(t('Do not log or display Payment debugging messages'), 'admin/config/services/payment/global');
    $string = 'Debug: %message on line !line in @file (!hide).';
    $string_arguments = array(
      '%message' => $message,
      '!line' => $line,
      '@file' => $file,
      '!hide' => $link,
    );
    drupal_set_message(t($string, $string_arguments));
    watchdog('Payment', $string, $string_arguments);
  }
}
