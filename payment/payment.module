<?php

/**
 * @file
 * Hook implementations and shared functions.
 */

use Drupal\payment\Entity\PaymentInterface;
use Drupal\payment\Plugin\payment\line_item\Basic;

// Load include files that contain hooks or callback code.
module_load_include('inc', 'payment', 'payment.ui');

/**
 * The prefix for payment line item tokens.
 */
define('PAYMENT_LINE_ITEM_TOKEN_PREFIX', 'line_item-');

/**
 * Implements hook_menu().
 *
 * @see payment_views_default_views()
 */
function payment_menu() {
  // Payment pages.
  $items['payment/%entity_object'] = array(
    'load arguments' => array('payment'),
    'title' => 'Payment',
    'title callback' => 'payment_title',
    'title arguments' => array(1),
    'page callback' => 'payment_page_payment_view',
    'page arguments' => array(1),
    'access callback' => 'payment_access',
    'access arguments' => array('view', 1),
    'file' => 'payment.ui.inc',
  );
  $items['payment/%entity_object/view'] = array(
    'load arguments' => array('payment'),
    'title' => 'View',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'weight' => -10,
  );
  $items['payment/%entity_object/edit'] = array(
    'load arguments' => array('payment'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('payment_form_standalone', 1),
    'access callback' => 'payment_access',
    'access arguments' => array('update', 1),
    'title' => 'Edit',
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'weight' => -9,
    'file' => 'payment.ui.inc',
  );
  $items['payment/%entity_object/delete'] = array(
    'load arguments' => array('payment'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('payment_form_payment_delete', 1),
    'access callback' => 'payment_access',
    'access arguments' => array('delete', 1),
    'title' => 'Delete',
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_INLINE,
    'weight' => -8,
    'file' => 'payment.ui.inc',
  );

  // Administration section.
  $items['admin/config/services/payment'] = array(
    'title' => 'Payment',
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('access administration pages'),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );

  // Payment types.
  $items['admin/config/services/payment/context'] = array(
    'title' => 'Payment types',
    'route_name' => 'payment.payment_context.list',
  );
  // Add a dummy item for Field UI to attach local tasks to.
  $items['admin/config/services/payment/context/%'] = array(
    'route_name' => 'payment.payment_context.configure',
    'title arguments' => array(5),
    'title callback' => 'payment_plugin_label',
  );

  // Payment methods.
  $items['admin/config/services/payment/method'] = array(
    'route_name' => 'payment.payment_method.list',
    'title' => 'Payment methods',
  );
  $items['admin/config/services/payment/method/%'] = array(
    'route_name' => 'payment.payment_method.edit',
  );

  // Payment status overview.
  $items['admin/config/services/payment/status'] = array(
    'route_name' => 'payment.payment_status.view',
    'title' => 'Payment statuses',
  );

  return $items;
}

/**
 * Implements hook_permission().
 *
 * @see \Drupal\payment\PaymentMethodAccessController
 */
function payment_permission() {
  $permissions = array(
    'payment.payment.view.any' => array(
      'title' => t('View any payment'),
    ),
    'payment.payment.view.own' => array(
      'title' => t('View own payments'),
    ),
    'payment.payment.update.any' => array(
      'title' => t('Update any payment'),
    ),
    'payment.payment.update.own' => array(
      'title' => t('Update own payments'),
    ),
    'payment.payment.delete.any' => array(
      'title' => t('Delete any payment'),
    ),
    'payment.payment.delete.own' => array(
      'title' => t('Delete own payments'),
    ),
    'payment.payment_method.update.any' => array(
      'title' => t('Update any payment method'),
      'restrict access' => TRUE,
    ),
    'payment.payment_method.update.own' => array(
      'title' => t('Update own payment methods'),
    ),
    'payment.payment_method.delete.any' => array(
      'title' => t('Delete any payment method'),
    ),
    'payment.payment_method.delete.own' => array(
      'title' => t('Delete own payment methods'),
    ),
    'payment.payment_method.view.any' => array(
      'title' => t('View any payment method'),
      'restrict access' => TRUE,
    ),
    'payment.payment_method.view.own' => array(
      'title' => t('View own payment methods'),
    ),
    'payment.payment_status.view' => array(
      'title' => t('View payment status overview'),
    ),
  );
  $definitions = \Drupal::service('plugin.manager.payment.method')->getDefinitions();
  unset($definitions['payment_unavailable']);
  foreach ($definitions as $plugin_id => $definition) {
    $permissions['payment.payment_method.create.' . $plugin_id] = array(
      'title' => t('Create %plugin_label payment methods', array(
        '%plugin_label' => $definition['label'],
      )),
    );
  }

  return $permissions;
}

/**
 * Implements hook_hook_info().
 */
function payment_hook_info() {
  $hooks['payment_context_alter'] = array(
    'group' => 'payment',
  );
  $hooks['payment_line_item_alter'] = array(
    'group' => 'payment',
  );
  $hooks['payment_method_alter'] = array(
    'group' => 'payment',
  );
  $hooks['payment_operation_access'] = array(
    'group' => 'payment',
  );
  $hooks['payment_pre_operation'] = array(
    'group' => 'payment',
  );
  $hooks['payment_pre_resume'] = array(
    'group' => 'payment',
  );
  $hooks['payment_status_alter'] = array(
    'group' => 'payment',
  );
  $hooks['payment_status_set'] = array(
    'group' => 'payment',
  );

  return $hooks;
}

/**
 * Implements hook_field_extra_fields().
 */
function payment_field_extra_fields() {
  $manager = \Drupal::service('plugin.manager.payment.context');
  foreach (array_keys($manager->getDefinitions()) as $plugin_id) {
    $field['payment'][$plugin_id] = array(
      'form' => array(
        'payment_line_items' => array(
          'label' => t('Line items'),
          'weight' => 0,
        ),
        'payment_method' => array(
          'label' => t('Payment method selection and configuration'),
          'weight' => 0,
        ),
        'payment_status' => array(
          'label' => t('Status'),
          'weight' => 0,
        ),
      ),
      'display' => array(
        'payment_line_items' => array(
          'label' => t('Line items'),
          'weight' => 0,
        ),
        'payment_method' => array(
          'label' => t('Payment method label'),
          'weight' => 0,
        ),
        'payment_status_items' => array(
          'label' => t('Status items'),
          'weight' => 0,
        ),
      ),
    );
  }

  return $field;
}

/**
 * Implements hook_element_info().
 */
function payment_element_info() {
  // A payment method selection and configuration element for a payment.
  $elements['payment_method'] = array(
    // A \Drupal\payment\Plugin'Core\Entity\PaymentInterface object.
    '#default_value' => NULL,
    '#input' => TRUE,
    // An array with IDs of the allowed payment methods. Leave empty to allow
    // all. If just a single value is given, or if only ony payment method is
    // valid, the element will not expand to a select list, but will appear to
    // the user as if there only is one payment method available at all.
    '#payment_method_ids' => array(),
    '#process' => array(array('\Drupal\payment\Element\PaymentMethod', 'process')),
    '#tree' => TRUE,
  );

  // Line item configuration. Use
  // \Drupal\payment\Element\PaymentLineItem::getLineItems() to get the
  // 'return' value.
  $elements['payment_line_items'] = array(
    '#attached' => array(
      'css' => array(drupal_get_path('module', 'payment') . '/css/payment.css'),
    ),
    // The number of values this element allows, which must be at least as much
    // as the number of line items in the default value. Enter 0 for unlimited.
    '#cardinality' => 0,
    // An array of
    // \Drupal\payment\Plugin\payment\line_item\PaymentLineItemInterface
    // objects.
    '#default_value' => array(),
    '#element_validate' => array(array('\Drupal\payment\Element\PaymentLineItem', 'validate')),
    '#input' => TRUE,
    '#process' => array('form_process_container', array('\Drupal\payment\Element\PaymentLineItem', 'process')),
    '#tree' => TRUE,
    '#theme_wrappers' => array('container'),
    '#value' => array(),
  );

  return $elements;
}

/**
 * Implements hook_entity_bundle_info().
 */
function payment_entity_bundle_info() {
  $bundles = array();

  $map = array(
    'payment' => 'plugin.manager.payment.context',
    'payment_method' => 'plugin.manager.payment.method',
  );
  foreach ($map as $entity_type => $manager_service) {
    $manager = \Drupal::service('plugin.manager.payment.context');
    foreach ($manager->getDefinitions() as $plugin_id => $definition) {
      $bundles[$entity_type][$plugin_id] = array(
        'label' => $definition['label'],
      );
    }
  }

  return $bundles;
}

/**
 * Implements hook_ENTITY_TYPE_load().
 */
function payment_payment_load(array $payments) {
  foreach ($payments as $payment) {
    // Load payment_basic-specific line item data.
    foreach ($payment->getLineItems() as $line_item) {
      if ($line_item instanceof Basic) {
        $line_item->loadData();
      }
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_insert().
 */
function payment_payment_insert(PaymentInterface $payment) {
  // Save payment_basic-specific line item data.
  foreach ($payment->getLineItems() as $line_item) {
    if ($line_item instanceof Basic) {
      $line_item->saveData();
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_update().
 */
function payment_payment_update(PaymentInterface $payment) {
  // Save payment_basic-specific line item data.
  foreach ($payment->getLineItems() as $line_item) {
    if ($line_item instanceof Basic) {
      $line_item->saveData();
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_delete().
 */
function payment_payment_delete(PaymentInterface $payment) {
  // Delete payment_basic-specific line item data.
  foreach ($payment->getLineItems() as $line_item) {
    if ($line_item instanceof Basic) {
      $line_item->deleteData();
    }
  }
}

/**
 * Implements title callback for hook_menu().
 *
 * @param string $plugin_id
 *
 * @return string
 */
function payment_plugin_label($plugin_id) {
  $manager = \Drupal::service('plugin.manager.payment.context');
  $definition = $manager->getDefinition($plugin_id);
  if ($definition) {
    return $definition['label'];
  }
}
