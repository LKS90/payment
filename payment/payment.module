<?php

/**
 * @file
 * Hook implementations and shared functions.
 */

/**
 * An absolute parent status: a payment for which all money has been transferred.
 */
define('PAYMENT_STATUS_MONEY_TRANSFERRED', 'payment_status_money_transferred');

/**
 * An absolute parent status: a payment for which no money has been transferred.
 */
define('PAYMENT_STATUS_MONEY_NOT_TRANSFERRED', 'payment_status_money_not_transferred');

/**
 * An absolute parent status: a payment whose status is unknown to us.
 */
define('PAYMENT_STATUS_UNKNOWN', 'payment_status_unknown');

/**
 * A new payment for which processing has not yet started.
 */
define('PAYMENT_STATUS_NEW', 'payment_status_new');

/**
 * An open (pending) payment.
 */
define('PAYMENT_STATUS_PENDING', 'payment_status_pending');

/**
 * A payment for which funds have been successfully transferred.
 */
define('PAYMENT_STATUS_SUCCESS', 'payment_status_success');

/**
 * A failed payment, e.g. for which no funds have been transferred.
 */
define('PAYMENT_STATUS_FAILED', 'payment_status_failed');

/**
 * The prefix for payment line item tokens.
 */
define('PAYMENT_LINE_ITEM_TOKEN_PREFIX', 'line_item-');

/**
 * The absolute minimum payment amount.
 */
define('PAYMENT_MINIMUM_AMOUNT', 0.001);

/**
 * Implements hook_init().
 */
function payment_init() {
  // Load include files that contain hooks or callback code.
  module_load_include('inc', 'payment', 'payment.ui');

  // Add administration CSS.
  if (preg_match('#^admin/config/services/payment/method#', $_GET['q'])
    || preg_match('#^admin/content/payment#', $_GET['q'])
    || preg_match('#^user/\d+?/payment#', $_GET['q'])) {
    drupal_add_css(drupal_get_path('module', 'payment') . '/css/payment.css');
  }
}

/**
 * Implements hook_menu().
 *
 * @see payment_views_default_views()
 */
function payment_menu() {
  // Payment pages.
  $items['payment/%entity_object'] = array(
    'load arguments' => array('payment'),
    'title callback' => 'payment_title',
    'title arguments' => array(1),
    'page callback' => 'payment_page_payment_view',
    'page arguments' => array(1),
    'access callback' => 'payment_access',
    'access arguments' => array('view', 1),
    'file' => 'payment.ui.inc',
  );
  $items['payment/%entity_object/view'] = array(
    'load arguments' => array('payment'),
    'title' => 'View',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'weight' => -10,
  );
  $items['payment/%entity_object/edit'] = array(
    'load arguments' => array('payment'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('payment_form', 1),
    'access callback' => 'payment_access',
    'access arguments' => array('update', 1),
    'title' => 'Edit',
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'weight' => -9,
    'file' => 'payment.ui.inc',
  );

  // Administration section.
  $items['admin/config/services/payment'] = array(
    'title' => 'Payment',
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('access administration pages'),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );

  // Payment method administration.
  $items['admin/config/services/payment/method/add'] = array(
    'title' => 'Add payment method',
    'page callback' => 'payment_page_payment_method_add_select_controller',
    'access arguments' => array('payment.method.administer'),
    'file' => 'payment.ui.inc',
    'type' => MENU_LOCAL_ACTION,
    'weight' => 1,
  );
  $items['admin/config/services/payment/method/add/%payment_method_controller'] = array(
    'title' => 'Add payment method',
    'page callback' => 'payment_method_form_add',
    'page arguments' => array(6),
    'access arguments' => array('payment.method.administer'),
    'file' => 'payment.ui.inc',
    'type' => MENU_CALLBACK,
  );
  $items['admin/config/services/payment/method/%entity_object'] = array(
    'load arguments' => array('payment_method'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('payment_form_payment_method', 5),
    'access arguments' => array('payment.method.administer'),
    'title callback' => 'payment_method_title',
    'title arguments' => array(5),
    'file' => 'payment.ui.inc',
  );
  $items['admin/config/services/payment/method/%entity_object/edit'] = array(
    'load arguments' => array('payment_method'),
    'title' => 'Edit',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'context' => MENU_CONTEXT_INLINE,
  );
  $items['admin/config/services/payment/method/%entity_object/enable'] = array(
    'load arguments' => array('payment_method'),
    'page callback' => 'payment_page_method_enable_disable',
    'page arguments' => array('enable', 5),
    'access callback' => 'payment_access_method_enable_disable',
    'access arguments' => array('enable', 5),
    'title' => 'Enable',
    'file' => 'payment.ui.inc',
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_INLINE,
    'weight' => 1,
  );
  $items['admin/config/services/payment/method/%entity_object/disable'] = array(
    'load arguments' => array('payment_method'),
    'page callback' => 'payment_page_method_enable_disable',
    'page arguments' => array('disable', 5),
    'access callback' => 'payment_access_method_enable_disable',
    'access arguments' => array('disable', 5),
    'title' => 'Disable',
    'file' => 'payment.ui.inc',
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_INLINE,
    'weight' => 1,
  );
  $items['admin/config/services/payment/method/%entity_object/clone'] = array(
    'load arguments' => array('payment_method'),
    'page callback' => 'payment_page_method_clone',
    'page arguments' => array(5),
    'access arguments' => array('payment.method.administer'),
    'title' => 'Clone',
    'file' => 'payment.ui.inc',
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_INLINE,
    'weight' => 2,
  );
  $items['admin/config/services/payment/method/%entity_object/delete'] = array(
    'load arguments' => array('payment_method'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('payment_form_payment_method_delete', 5),
    'access arguments' => array('payment.method.administer'),
    'title' => 'Delete',
    'file' => 'payment.ui.inc',
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_INLINE,
    'weight' => 3,
  );

  // Payment status overview.
  $items['admin/config/services/payment/status'] = array(
    'title' => 'Payment statuses',
    'page callback' => 'payment_page_status',
    'access arguments' => array('payment.status.view'),
    'file' => 'payment.ui.inc',
    'weight' => 1,
  );

  // Placeholder pages in case certain dependencies have not been met.
  $base = array(
    'page callback' => 'payment_page_required_modules',
    'page arguments' => array(array(
      'views' => 'Views',
    )),
    'file' => 'payment.ui.inc',
    'menu_name' => 'management',
  );
  if (!module_exists('views')) {
    $items['admin/content/payment'] = array(
      'title' => 'Payments',
      'access arguments' => array('payment.view.any'),
    ) + $base;
    $items['admin/config/services/payment/method'] = array(
      'title' => 'Payment',
      'access arguments' => array('payment.method.administer'),
    ) + $base;
  }

  return $items;
}

/**
 * Implement hook_menu_alter().
 */
function payment_menu_alter(&$items) {
  // Make "Manage fields" the default local task.
  $items['admin/config/services/payment/payment'] = array(
    'title' => 'Payments',
    'type' => MENU_NORMAL_ITEM,
  ) + $items['admin/config/services/payment/payment/fields'];
  $items['admin/config/services/payment/payment/fields'] = array(
    'title' => 'Manage fields',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
}

/**
 * Implements hook_permission().
 */
function payment_permission() {
  return array(
    'payment.rules.administer' => array(
      'title' => t('Administer rule configurations'),
      'restrict access' => TRUE,
    ),
    'payment.administer' => array(
      'title' => t('Administer payment configuration'),
    ),
    'payment.create' => array(
      'title' => t('Create payments'),
    ),
    'payment.view.any' => array(
      'title' => t('View any payment'),
    ),
    'payment.view.own' => array(
      'title' => t('View own payments'),
    ),
    'payment.update.any' => array(
      'title' => t('Update any payment'),
    ),
    'payment.update.own' => array(
      'title' => t('Update own payments'),
    ),
    'payment.method.administer' => array(
      'title' => t('Administer payment methods'),
    ),
    'payment.status.view' => array(
      'title' => t('View payment status overview'),
    ),
  );
}

/**
 * Implements hook_hook_info().
 */
function payment_hook_info() {
  $hooks['payment_status_info'] = array(
    'group' => 'payment',
  );
  $hooks['payment_method_controller_info'] = array(
    'group' => 'payment',
  );
  $hooks['payment_line_item_info'] = array(
    'group' => 'payment',
  );
  $hooks['payment_status_change'] = array(
    'group' => 'payment',
  );
  $hooks['payment_pre_execute'] = array(
    'group' => 'payment',
  );
  $hooks['payment_validate'] = array(
    'group' => 'payment',
  );

  return $hooks;
}

/**
 * Implements hook_theme().
 */
function payment_theme() {
  $theme['payment_page_status_row'] = array(
    'arguments' => array(
      'status' => '',
      'depth' => 0,
    ),
  );

  return $theme;
}

/**
 * Implements hook_field_extra_fields().
 */
function payment_field_extra_fields() {
  $field['payment']['payment'] = array(
    'form' => array(
      'line_items' => array(
        'label' => t('Line items'),
        'weight' => 0,
      ),
      'payment_method' => array(
        'label' => t('Payment method selection and configuration'),
        'weight' => 0,
      ),
      'status' => array(
        'label' => t('Status'),
        'weight' => 0,
      ),
    ),
    'display' => array(
      'line_items' => array(
        'label' => t('Line items'),
        'weight' => 0,
      ),
      'payment_method' => array(
        'label' => t('Payment method (generic title)'),
        'weight' => 0,
      ),
      'status_items' => array(
        'label' => t('Status items'),
        'weight' => 0,
      ),
    ),
  );

  return $field;
}

/**
 * Implements hook_entity_info().
 */
function payment_entity_info() {
  $entity_info['payment'] = array(
    'label' => t('Payment'),
    'controller class' => 'PaymentEntityController',
    'entity class' => 'Payment',
    'module' => 'payment',
    'base table' => 'payment',
    'entity keys' => array(
      'id' => 'pid',
      'label' => 'description',
    ),
    // @todo Enable static cache once http://drupal.org/node/1273756 is fixed.
    'static cache' => FALSE,
    'fieldable' => TRUE,
    'bundles' => array(
      'payment' => array(
        'label' => t('Payment'),
        'admin' => array(
          'path' => 'admin/config/services/payment/payment',
          'access arguments' => array('payment.administer'),
        ),
      ),
    ),
  );
  $entity_info['payment_method'] = array(
    'label' => t('Payment method'),
    'controller class' => 'PaymentMethodEntityController',
    'features controller class' => 'PaymentMethodFeaturesController',
    'entity class' => 'PaymentMethod',
    'module' => 'payment',
    'base table' => 'payment_method',
    'entity keys' => array(
      'id' => 'pmid',
      'label' => 'title_specific',
      'name' => 'name',
    ),
    'exportable' => TRUE,
    // @todo Enable static cache once http://drupal.org/node/1273756 is fixed.
    'static cache' => FALSE,
  );

  return $entity_info;
}

/**
 * Implements hook_entity_property_info().
 */
function payment_entity_property_info() {
  // Payment.
  $properties['payment']['properties']['currency_code'] = array(
    'description' => t('A three-letter ISO 4217 currency code.'),
    'label' => t('Currency code'),
    'required' => TRUE,
    'schema field' => 'currency_code',
  );
  $properties['payment']['properties']['created'] = array(
    'label' => t('Creation date and time'),
    'required' => TRUE,
    'schema field' => 'created',
    'type' => 'date',
  );
  $properties['payment']['properties']['description'] = array(
    'label' => t('Description'),
    'schema field' => 'description',
  );
  $properties['payment']['properties']['expired'] = array(
    'label' => t('Expiration date and time'),
    'schema field' => 'expired',
    'type' => 'date',
  );
  $properties['payment']['properties']['finish_callback'] = array(
    'description' => t('The name of the function to call once payment processing is completed.'),
    'label' => t('Finish callback'),
    'required' => TRUE,
    'schema field' => 'finish_callback',
  );
  $properties['payment']['properties']['method'] = array(
    'label' => t('Payment method'),
    'required' => TRUE,
    'type' => 'payment_method',
  );
  $properties['payment']['properties']['pid'] = array(
    'label' => t('Payment ID'),
    'schema field' => 'pid',
    'type' => 'integer',
  );
  $properties['payment']['properties']['pmid'] = array(
    'label' => t('Payment method ID'),
    'schema field' => 'pmid',
    'type' => 'integer',
  );
  $properties['payment']['properties']['uid'] = array(
    'label' => 'User ID',
    'description' => t('The ID of the user this payment belongs to.'),
    'required' => TRUE,
    'schema field' => 'uid',
    'type' => 'integer',
  );
  $properties['payment']['properties']['updated'] = array(
    'label' => t('Last updated date and time'),
    'schema field' => 'updated',
    'type' => 'date',
  );

  // Payment method.
  $properties['payment_method']['properties']['controller_class_name'] = array(
    'label' => t('Payment method type'),
    'schema field' => 'controller_class_name',
  );
  $properties['payment_method']['properties']['enabled'] = array(
    'description' => t('Whether the payment method is enabled and can be used.'),
    'label' => t('Enabled'),
    'schema field' => 'enabled',
    'type' => 'boolean',
  );
  $properties['payment_method']['properties']['pmid'] = array(
    'label' => t('Payment method ID'),
    'schema field' => 'pmid',
    'type' => 'integer',
  );
  $properties['payment_method']['properties']['title_specific'] = array(
    'label' => t('Title (specific)'),
    'required' => TRUE,
    'schema field' => 'title_specific',
  );
  $properties['payment_method']['properties']['title_generic'] = array(
    'label' => t('Title (generic)'),
    'schema field' => 'title_generic',
  );

  return $properties;
}

/**
 * Implements hook_element_info().
 */
function payment_element_info() {
  // A payment method selection and configuration element. Every form this
  // element is used in should have a Payment object in $form_state['payment'].
  $elements['payment_method'] = array(
    '#input' => TRUE,
    '#process' => array('payment_form_process_method'),
    '#element_validate' => array('payment_form_process_method_validate'),
    // An array with IDs of the allowed payment methods. Leave empty to allow all.
    '#pmids' => array(),
  );
  // An element to collect a payment amount and convert it to a float.
  $elements['payment_amount'] = array(
    '#input' => TRUE,
    '#process' => array('payment_form_process_amount'),
    '#element_validate' => array('payment_form_process_amount_validate'),
    // The minimum payment amount as a float that needs to be entered.
    '#minimum_amount' => PAYMENT_MINIMUM_AMOUNT,
    // The ISO 4217 currency code.
    '#currency_code' => 'XXX',
  );
  // Line item configuration. The element's #default_value is an array with
  // PaymentLineItem objects.
  $elements['payment_line_item'] = array(
    '#input' => TRUE,
    '#tree' => TRUE,
    '#process' => array('payment_form_process_line_item'),
    '#attached' => array(
      'css' => array(drupal_get_path('module', 'payment') . '/css/payment.css'),
      ),
    '#element_validate' => array('payment_form_process_line_item_validate'),
    // The ISO 4217 currency code.
    '#currency_code' => 'XXX',
    // The number of values this element allows. Enter 0 for unlimited.
    '#cardinality' => 0,
  );

  return $elements;
}

/**
 * Implements hook_views_api().
 */
function payment_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'payment') . '/views',
  );
}

/**
 * Gets payment statuses.
 *
 * @see hook_payment_status_info()
 *
 * @return array
 *   An array with PaymentStatusInfo objects for all available statuses.
 */
function payment_statuses_info() {
  static $statuses_info = NULL;

  if (!$statuses_info) {
    $statuses_info = array();
    foreach (module_invoke_all('payment_status_info') as $status_info) {
      $statuses_info[$status_info->status] = $status_info;
    }
    drupal_alter('payment_status_info', $statuses_info);
  }

  return $statuses_info;
}

/**
 * Gets a specific payment status.
 *
 * @param $status string
 *   A status' system name.
 * @param $unknown boolean
 *   Whether to return info for PAYMENT_STATUS_UNKNOWN if the requested status
 *   does not exist.
 *
 * @return mixed
 *   A PaymentStatusInfo object or FALSE if the status does not exist.
 */
function payment_status_info($status, $unknown = FALSE) {
  $statuses_info = payment_statuses_info();

  return isset($statuses_info[$status]) ? $statuses_info[$status] : ($unknown ? $statuses_info[PAYMENT_STATUS_UNKNOWN] : FALSE);
}

/**
 * Returns information about all line item types.
 *
 * @see hook_payment_line_item_type_info()
 *
 * @return array
 *   An array with PaymentLineItemInfo objects, keyed by PaymentLineItemInfo::name.
 */
function payment_line_items_info() {
  static $line_items_info = NULL;

  if (is_null($line_items_info)) {
    $line_items_info = array();
    foreach (module_invoke_all('payment_line_item_info') as $line_item_info) {
      $line_items_info[$line_item_info->name] = $line_item_info;
    }
    drupal_alter('payment_line_item_info', $line_items_info);
  }

  return $line_items_info;
}

/**
 * Returns information about a specific line item type.
 *
 * @param $name string
 *   The line item type's machine name.
 *
 * @return mixed
 *   A PaymentLineItemInfo object or FALSE if the requested info could not be
 *   found.
 */
function payment_line_item_info($name) {
  $line_items_info = payment_line_items_info();

  return isset($line_items_info[$name]) ? $line_items_info[$name] : FALSE;
}

/**
 * Check if a payment status has a given other status as one of its ancestors.
 *
 * @param $status string
 *   The payment status.
 * @param $ancestor_status string
 *   The ancestor status to check for.
 *
 * @return boolean
 */
function payment_status_has_ancestor($status, $ancestor_status) {
  return in_array($ancestor_status, payment_status_info($status, TRUE)->ancestors());
}

/**
 * Check if a payment status is equal to a given other status or has it one of
 * its ancestors.
 *
 * @param $status string
 *   The payment status.
 * @param $ancestor_status string
 *   The ancestor status to check for.
 *
 * @return boolean
 */
function payment_status_is_or_has_ancestor($status, $ancestor_status) {
  return $status == $ancestor_status || in_array($ancestor_status, payment_status_info($status, TRUE)->ancestors());
}

/**
 * Returns information about payment method controllers.
 *
 * @return array
 *   Keys are payment method controller class aliases, values are the real
 *   payment method controller class names. This allows
 *   hook_payment_method_controller_info_alter() to override payment method
 *   controllers.
 */
function payment_method_controllers_info() {
  static $controllers_info = NULL;

  if (!$controllers_info) {
    $controllers_info = module_invoke_all('payment_method_controller_info');
    foreach ($controllers_info as $controller_class_name_alias => $controller_class_name) {
      if (is_numeric($controller_class_name_alias)) {
        unset($controllers_info[$controller_class_name_alias]);
        $controllers_info[$controller_class_name] = $controller_class_name;
      }
    }
    drupal_alter('payment_method_controller_info', $controllers_info);
  }

  return $controllers_info;
}

/**
 * Load a payment method controller().
 *
 * @param $controller_class_name string
 *   The name of the controller class to load.
 *
 * @return mixed
 *   Either a PaymentMethodController object or FALSE in case of errors.
 */
function payment_method_controller_load($controller_class_name) {
  $controllers = payment_method_controller_load_multiple(array($controller_class_name));

  return reset($controllers);
}

/**
 * Load multiple payment method controllers.
 *
 * @param $controller_class_names array
 *   An array with names of controller classes. Leave empty to load all
 *   controllers.
 *
 * @return array
 *   Keys are the values of $controller_class_names passed on to this function.
 *   Every value is either a PaymentMethodController object or FALSE if the
 *   controller could not be loaded.
 */
function payment_method_controller_load_multiple(array $controller_class_names = array()) {
  static $controllers = NULL;

  // Load all existing controllers.
  if (is_null($controllers)) {
    foreach (payment_method_controllers_info() as $controller_class_name_alias => $controller_class_name) {
      $controller = new $controller_class_name();
      $controller->name = $controller_class_name;
      $controllers[$controller_class_name_alias] = $controller;
    }
  }

  // Set FALSE for requested controllers that do not exist.
  $controllers += array_fill_keys(array_diff($controller_class_names, array_keys($controllers)), FALSE);

  return $controller_class_names ? array_intersect_key($controllers, array_flip($controller_class_names)) : array_filter($controllers);
}

/**
 * Convert an amount as a float to a human-readable format.
 *
 * @param $amount float
 * @param $currency_code string
 *
 * @return string
 */
function payment_amount_human_readable($amount, $currency_code = NULL) {
  // @todo Use Currency 7.x-2.x (http://drupal.org/project/currency).
  $amount_string = number_format($amount, 2, '.', '');
  $decimal_separator_position = strpos($amount_string, '.');
  $arguments = array(
    '!currency_code' => $currency_code,
    '!units' => substr($amount_string, 0, $decimal_separator_position),
    '!cents' => substr($amount_string, $decimal_separator_position + 1),
  );
  return $currency_code ? t('!currency_code !units.!cents', $arguments) : t('!units.!cents', $arguments);
}

/**
 * Menu access callback: return a user's access to a payment.
 *
 * @param $payment Payment
 *
 * @return string
 */
function payment_access($op, Payment $payment, $account = NULL) {
  global $user;

  if (!$account) {
    $account = $user;
  }

  if ($account->uid = 1) {
    return TRUE;
  }

  switch ($op) {
    case 'view':
    case 'update';
      return user_access('payment.' . $op . '.any') || user_access('payment.' . $op . '.own') && $account->uid = $payment->uid;
      break;
    case 'create':
    case 'delete':
      return user_access('payment.' . $op);
      break;
  }
  return FALSE;
}

/**
 * Implements PaymentLineItemInfo::callback.
 */
function payment_line_item_get_specific($name, Payment $payment) {
  return isset($payment->line_items[$name]) ? array($payment->line_items[$name]) : array();
}

/**
 * Implements PaymentLineItemInfo::callback.
 */
function payment_line_item_get_all($name, Payment $payment) {
  return $payment->line_items;
}
/**
 * Implements Rules access callback.
 */
function payment_rules_access($type, $name) {
  return user_access('payment.rules.administer');
}

/**
 * Implements menu access callback.
 *
 * @param string $op
 *   Either 'enable' or 'disable'.
 * @param PaymentMethod $payment_method
 *
 * @return boolean
 */
function payment_access_method_enable_disable($op, PaymentMethod $payment_method) {
  switch ($op) {
    case 'enable':
      return $payment_method->enabled == FALSE && user_access('payment.method.administer');
    case 'disable':
      return $payment_method->enabled == TRUE && user_access('payment.method.administer');
  }
  return FALSE;
}