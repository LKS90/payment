<?php

/**
 * @file
 * Hook implementations and shared functions.
 */

/**
 * Implements hook_menu().
 */
function paymenttest_menu() {
  // @see PaymentLineItemFormElementTest
  $items['paymenttest-form-element-payment-line-item'] = array(
    'page callback' => 'drupal_get_form',
    'page arguments' => array('paymenttest_form_payment_line_item'),
    'access callback' => TRUE,
  );
  // @see PaymentAmountFormElementTest
  // The second URL path argument is an optional float value specifying a
  // minimum amount.
  $items['paymenttest-form-element-payment-amount'] = array(
    'page callback' => 'drupal_get_form',
    'page arguments' => array('paymenttest_form_payment_amount'),
    'access callback' => TRUE,
  );

  return $items;
}

/**
 * Implements hook_payment_line_item_info().
 */
function paymenttest_payment_line_item_info() {
  return array(
    new PaymentLineItemInfo(array(
      'callback' => 'paymenttest_line_item_get',
      'name' => 'paymenttest',
      'title' => t('Payment Form amount'),
    )),
  );
}

/**
 * Implements hook_payment_validate().
 */
function paymenttest_payment_validate(Payment $payment, PaymentMethod $payment_method, $strict) {
  if (isset($payment->paymenttest_payment_validate)) {
    throw new PaymentValidationException('paymenttest');
  }
}

/**
 * Implements hook_payment_status_change().
 */
function paymenttest_payment_status_change(Payment $payment, PaymentStatusItem $previous_status_item) {
  $payment->paymenttest_payment_status_change = TRUE;
}

/**
 * Implements hook_payment_pre_execute().
 */
function paymenttest_payment_pre_execute(Payment $payment) {
  $payment->paymenttest_payment_pre_execute = TRUE;
}

/**
 * Implements Payment finish callback.
 */
function paymenttest_finish_callback(Payment $payment) {
  $payment->paymenttest_finish_callback = TRUE;
}

/**
 * Implements PaymentLineItemInfo::callback.
 */
function paymenttest_line_item_get($name, Payment $payment) {
  return(array($payment->line_items['foo'], $payment->line_items['bar']));
}

/**
 * Implements form build callback: show a payment_line_item element.
 */
function paymenttest_form_payment_line_item(array $form, array &$form_state) {
  $form['#submit'] = array('paymenttest_form_payment_element');
  $form['line_item'] = array(
    '#type' => 'payment_line_item',
    '#currency_code' => 'XXX',
    '#cardinality' => 2,
  );
  if (arg(1) == 'default-values') {
    $form['line_item']['#default_value'] = paymenttest_default_line_items();
  }
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
  );

  return $form;
}

/**
 * Return two default payment line items.
 *
 * @return array
 */
function paymenttest_default_line_items() {
  return array(
    new PaymentLineItem(array(
      'amount' => 1.1,
      'quantity' => 1,
      'tax_rate' => 0.1,
      'description' => 'description_1',
      'name' => 'name_1',
    )),
    new PaymentLineItem(array(
      'amount' => 2.2,
      'quantity' => 2,
      'tax_rate' => 0.2,
      'description' => 'description_2',
      'name' => 'name_2',)),
  );
}

/**
 * Implements form build callback: show a payment_amount element.
 */
function paymenttest_form_payment_amount(array $form, array &$form_state) {
  $form['#submit'] = array('paymenttest_form_payment_element');
  $form['amount'] = array(
    '#type' => 'payment_amount',
    '#currency_code' => 'XXX',
  );
  if (arg(1)) {
    $form['amount']['#minimum_amount'] = (float) arg(1);
  }
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
  );

  return $form;
}

/**
 * Implements form submit callback for testing the submission of form elements.
 */
function paymenttest_form_payment_element(array $form, array &$form_state) {
  // Redirect, so we can test whether form errors were thrown.
  $form_state['redirect'] = 'user';
}