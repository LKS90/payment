<?php

class PaymentMethodEntityPermissionWebTestCase extends PaymentWebTestCase {

  static function getInfo() {
    return array(
      'name' => 'Payment method permissions',
      'group' => 'Payment',
      'dependencies' => array('payment', 'paymentmethodbasic', 'xtools'),
    );
  }

  function setUp() {
    parent::setUp(array('payment', 'paymentmethodbasic', 'xtools'));
  }

  function testPaymentMethodEntityPermissions() {
    // Create a new payment method.
    $this->XtoolsAssertEntityPermission($this->paymentMethodCreate(0, payment_method_controller_load('PaymentMethodBasicController')), 'payment method', 'payment_method_access', 'create', array('payment.method.create.PaymentMethodBasicController'));

    // Update a payment method that belongs to user 1.
    $this->XtoolsAssertEntityPermission($this->paymentMethodCreate(1, payment_method_controller_load('PaymentMethodBasicController')), 'payment method', 'payment_method_access', 'update', array('payment.method.update.any'));

    // Update a payment method that belongs to user 2.
    $this->XtoolsAssertEntityPermission($this->paymentMethodCreate(2, payment_method_controller_load('PaymentMethodBasicController')), 'payment method', 'payment_method_access', 'update', array('payment.method.update.own'));

    // Delete a payment method that belongs to user 1.
    $this->XtoolsAssertEntityPermission($this->paymentMethodCreate(1, payment_method_controller_load('PaymentMethodBasicController')), 'payment method', 'payment_method_access', 'delete', array('payment.method.delete.any'));

    // Delete a payment method that belongs to user 2.
    $this->XtoolsAssertEntityPermission($this->paymentMethodCreate(2, payment_method_controller_load('PaymentMethodBasicController')), 'payment method', 'payment_method_access', 'delete', array('payment.method.delete.own'));

    // Enable an enabled payment method that belongs to user 1.
    $payment_method = $this->paymentMethodCreate(1, payment_method_controller_load('PaymentMethodBasicController'));
    $this->XtoolsAssertEntityPermission($payment_method, 'enabled payment method', 'payment_method_access', 'enable', array('payment.method.update.any'), array(
      'root' => FALSE,
      'authenticated_with_permissions' => FALSE,
    ));

    // Enable an enabled payment method that belongs to user 2.
    $payment_method = $this->paymentMethodCreate(2, payment_method_controller_load('PaymentMethodBasicController'));
    $this->XtoolsAssertEntityPermission($payment_method, 'enabled payment method', 'payment_method_access', 'enable', array('payment.method.update.own'), array(
      'root' => FALSE,
      'authenticated_with_permissions' => FALSE,
    ));

    // Enable a disabled payment method that belongs to user 1.
    $payment_method = $this->paymentMethodCreate(1, payment_method_controller_load('PaymentMethodBasicController'));
    $payment_method->enabled = FALSE;
    $this->XtoolsAssertEntityPermission($payment_method, 'disabled payment method', 'payment_method_access', 'enable', array('payment.method.update.any'));

    // Enable a disabled payment method that belongs to user 2.
    $payment_method = $this->paymentMethodCreate(2, payment_method_controller_load('PaymentMethodBasicController'));
    $payment_method->enabled = FALSE;
    $this->XtoolsAssertEntityPermission($payment_method, 'disabled payment method', 'payment_method_access', 'enable', array('payment.method.update.own'));

    // Disable a disabled payment method that belongs to user 1.
    $payment_method = $this->paymentMethodCreate(1, payment_method_controller_load('PaymentMethodBasicController'));
    $payment_method->enabled = FALSE;
    $this->XtoolsAssertEntityPermission($payment_method, 'disabled payment method', 'payment_method_access', 'disable', array('payment.method.update.any'), array(
      'root' => FALSE,
      'authenticated_with_permissions' => FALSE,
    ));

    // Disable a disabled payment method that belongs to user 2.
    $payment_method = $this->paymentMethodCreate(2, payment_method_controller_load('PaymentMethodBasicController'));
    $payment_method->enabled = FALSE;
    $this->XtoolsAssertEntityPermission($payment_method, 'disabled payment method', 'payment_method_access', 'disable', array('payment.method.update.own'), array(
      'root' => FALSE,
      'authenticated_with_permissions' => FALSE,
    ));

    // Disable an enabled payment method that belongs to user 1.
    $payment_method = $this->paymentMethodCreate(1, payment_method_controller_load('PaymentMethodBasicController'));
    $this->XtoolsAssertEntityPermission($payment_method, 'disabled payment method', 'payment_method_access', 'disable', array('payment.method.update.any'));

    // Enable am enabled payment method that belongs to user 2.
    $payment_method = $this->paymentMethodCreate(2, payment_method_controller_load('PaymentMethodBasicController'));
    $this->XtoolsAssertEntityPermission($payment_method, 'disabled payment method', 'payment_method_access', 'disable', array('payment.method.update.own'));

    // Clone a payment method that belongs to user 1.
    $this->XtoolsAssertEntityPermission($this->paymentMethodCreate(1, payment_method_controller_load('PaymentMethodBasicController')), 'payment method', 'payment_method_access', 'clone', array('payment.method.view.any', 'payment.method.create.PaymentMethodBasicController'));

    // Clone a payment method that belongs to user 2.
    $this->XtoolsAssertEntityPermission($this->paymentMethodCreate(2, payment_method_controller_load('PaymentMethodBasicController')), 'payment method', 'payment_method_access', 'clone', array('payment.method.view.own', 'payment.method.create.PaymentMethodBasicController'));

    // View a payment method that belongs to user 1.
    $this->XtoolsAssertEntityPermission($this->paymentMethodCreate(1, payment_method_controller_load('PaymentMethodBasicController')), 'payment method', 'payment_method_access', 'view', array('payment.method.view.any'));

    // View a payment method that belongs to user 2.
    $this->XtoolsAssertEntityPermission($this->paymentMethodCreate(2, payment_method_controller_load('PaymentMethodBasicController')), 'payment method', 'payment_method_access', 'view', array('payment.method.view.own'));
  }
}