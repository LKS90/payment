<?php

/**
 * @file
 * Installation and uninstallation functions.
 */

use Drupal\Component\Uuid\Uuid;

/**
 * A bit flag used to let us know if an entity has been customly defined.
 *
 * This constant comes from Entity 7.x-1.x and is required for
 * payment_update_7103() to work under Drupal 8.x.
 */
define('ENTITY_CUSTOM', 0x01);

/**
 * Implements hook_schema().
 */
function payment_schema() {
  $schema['payment_line_item'] = array(
    'fields' => array(
      'amount' => array(
        'type' => 'float',
        'size' => 'big',
        'not null' => TRUE,
      ),
      'amount_total' => array(
        'type' => 'float',
        'size' => 'big',
        'not null' => TRUE,
      ),
      'name' => array(
        'type' => 'varchar',
        'length' => 255,
      ),
      'payment_id' => array(
        'description' => 'The {payment}.id this line item belongs to.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'plugin_id' => array(
        'type' => 'varchar',
        'length' => 255,
      ),
      'quantity' => array(
        'type' => 'int',
        'default' => 1,
        'not null' => TRUE,
      ),
    ),
    'primary key' => array('name', 'payment_id'),
    'foreign keys' => array(
      'payment_id' => array(
        'table' => 'payment',
        'columns' => array(
          'payment_id' => 'id',
        ),
      ),
    ),
    'indexes' => array(
      'payment_id' => array('payment_id'),
    ),
  );
  $schema['payment'] = array(
    'fields' => array(
      'context' => array(
        'type' => 'varchar',
        'length' => 255,
      ),
      'currency_code' => array(
        'type' => 'varchar',
        'length' => 3,
        'default' => 'XXX',
        'not null' => TRUE,
      ),
      'finish_callback' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      'id' => array(
        'type' => 'serial',
      ),
      'payment_method_id' => array(
        'type' => 'varchar',
        'length' => 255,
      ),
      'first_payment_status_id' => array(
        'description' => "The {payment_status_item}.id of this payment's first status item.",
        'type' => 'int',
        'unsigned' => TRUE,
        'default' => 0,
        'not null' => TRUE,
      ),
      'last_payment_status_id' => array(
        'description' => "The {payment_status_item}.id of this payment's most recent status item.",
        'type' => 'int',
        'unsigned' => TRUE,
        'default' => 0,
        'not null' => TRUE,
      ),
      'owner_id' => array(
        'description' => 'The {users}.uid this payment belongs to.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'uuid' => array(
        'description' => 'Unique Key: Universally unique identifier for this entity.',
        'type' => 'varchar',
        'length' => 128,
        'not null' => FALSE,
      ),
    ),
    'foreign keys' => array(
      'first_payment_status_id' => array(
        'table' => 'payment_status_item',
        'columns' => array(
          'first_payment_status_id' => 'id',
        ),
      ),
      'last_payment_status_id' => array(
        'table' => 'payment_status_item',
        'columns' => array(
          'last_payment_status_id' => 'id',
        ),
      ),
      'owner_id' => array(
        'table' => 'user',
        'columns' => array(
          'owner_id' => 'uid',
        ),
      ),
    ),
    'indexes' => array(
      'id' => array('id'),
      'uuid' => array('uuid'),
    ),
    'primary key' => array('id'),
  );
  $schema['payment_status'] = array(
    'fields' => array(
      'created' => array(
        'type' => 'int',
        'not null' => TRUE,
      ),
      'payment_id' => array(
        'description' => 'The payment ID.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'plugin_id' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      'id' => array(
        'type' => 'serial',
      ),
    ),
    'foreign keys' => array(
      'payment_id' => array(
        'table' => 'payment',
        'columns' => array(
          'payment_id' => 'id',
        ),
      ),
    ),
    'indexes' => array(
      'payment_id' => array('payment_id'),
    ),
    'primary key' => array('id'),
  );

  return $schema;
}

/**
 * Adds the psiid_first field to {payment}.
 *
 * @see payment_update_7105()
 */
function payment_update_7100(&$sandbox) {
  db_add_field('payment', 'psiid_first', array(
    'type' => 'int',
    'unsigned' => TRUE,
    'default' => 0,
    'not null' => TRUE,
  ));
}

/**
 * Adds the amount_total field to {payment_line_item}.
 *
 * @see payment_update_7104()
 */
function payment_update_7101(&$sandbox) {
  db_add_field('payment_line_item', 'amount_total', array(
    'type' => 'float',
    'size' => 'big',
  ));
}

/**
 * Adds the description_arguments field to {payment}.
 */
function payment_update_7102(&$sandbox) {
  // A blob column cannot have a default value, so we need to update existing
  // rows in a separate update query. However, making the column NOT NULL from
  // the start causes data truncation errors, so we do that afterwards.
  db_add_field('payment', 'description_arguments', array(
    'type' => 'blob',
    'size' => 'big',
    'serialize' => TRUE,
  ));
  db_update('payment')
    ->fields(array(
      'description_arguments' => 'a:0:{}',
    ))
    ->execute();
  db_change_field('payment', 'description_arguments', 'description_arguments', array(
    'type' => 'blob',
    'size' => 'big',
    'serialize' => TRUE,
    'not null' => TRUE,
  ));
}

/**
 * Sets the exportable status for existing payment methods.
 */
function payment_update_7103(array &$sandbox) {
  db_update('payment_method')
    ->condition('module', 'payment')
    ->fields(array(
      'status' => ENTITY_CUSTOM,
    ))
    ->execute();
}

/**
 * Updates NOT NULL and default value configuration for some database columns.
 */
function payment_update_7104(array &$sandbox) {
  db_change_field('payment', 'currency_code', 'currency_code', array(
    'type' => 'varchar',
    'length' => 3,
    'default' => 'XXX',
    'not null' => TRUE,
  ));
  db_change_field('payment', 'description', 'description', array(
    'type' => 'varchar',
    'length' => 255,
    'not null' => TRUE,
  ));
  db_change_field('payment', 'finish_callback', 'finish_callback', array(
    'type' => 'varchar',
    'length' => 255,
    'not null' => TRUE,
  ));
  db_change_field('payment_line_item', 'amount', 'amount', array(
    'type' => 'float',
    'size' => 'big',
    'not null' => TRUE,
  ));
  db_query('UPDATE {payment_line_item} SET amount_total = amount * quantity * (tax_rate + 1)');
  db_change_field('payment_line_item', 'amount_total', 'amount_total', array(
    'type' => 'float',
    'size' => 'big',
    'not null' => TRUE,
  ));
  db_change_field('payment_line_item', 'quantity', 'quantity', array(
    'type' => 'int',
    'default' => 1,
    'not null' => TRUE,
  ));
  db_change_field('payment_line_item', 'tax_rate', 'tax_rate', array(
    'type' => 'float',
    'size' => 'big',
    'default' => 0.0,
    'not null' => TRUE,
  ));
  db_change_field('payment_method', 'enabled', 'enabled', array(
    'type' => 'int',
    'size' => 'tiny',
    'default' => 0,
    'not null' => TRUE,
  ));
  db_change_field('payment_method', 'status', 'status', array(
    'type' => 'int',
    'size' => 'tiny',
    'default' => ENTITY_CUSTOM,
    'not null' => TRUE,
  ));
  db_change_field('payment_status_item', 'status', 'status', array(
    'type' => 'varchar',
    'length' => 255,
    'not null' => TRUE,
  ));
  db_change_field('payment_status_item', 'created', 'created', array(
    'type' => 'int',
    'not null' => TRUE,
  ));
}

/**
 * Sets {payment}.psiid_first values.
 */
function payment_update_7105(array &$sandbox) {
  // Find out how many transactions need to be converted in total and during
  // this run.
  $per_run = 100;
  if (!isset($sandbox['count'])) {
    $sandbox['count'] = db_select('payment')
      ->countQuery()
      ->execute()
      ->fetchField();
  }
  if (!isset($sandbox['run'])) {
    $sandbox['run'] = 0;
  }
  else {
    $sandbox['run']++;
  }
  if ($sandbox['count']) {
    $sandbox['#finished'] = 1 / ceil($sandbox['count'] / (($sandbox['run'] + 1) * $per_run));

    // Load the PIDs for this run.
    $pids = db_select('payment')
      ->fields('payment', array('pid'))
      ->range($sandbox['run'] * $per_run, $per_run)
      ->execute()
      ->fetchCol();

    // Load the PIIDs and PIDs for this run.
    $psiid_first = db_select('payment_status_item')
      ->fields('payment_status_item', array('pid', 'psiid'))
      ->condition('pid', $pids)
      ->execute()
      ->fetchAllKeyed();

    foreach ($psiid_first as $pid => $psiid) {
      $query = db_update('payment')
        ->condition('pid', $pid)
        ->fields(array(
          'psiid_first' => $psiid,
        ))
        ->execute();
    }
  }
}

/**
 * Upgrades payments to 8.x-2.x.
 */
function payment_update_8200(array &$sandbox) {
  // Rename pid to id.
  db_drop_primary_key('payment');
  db_change_field('payment', 'pid', 'id', array(
    'type' => 'serial',
  ), array(
    'primary key' => array('id'),
  ));
  db_drop_index('payment', 'pid');
  db_add_index('payment', 'id', array('id'));

  // Rename context_data to context_configuration.
  db_change_field('payment', 'context_data', 'context_configuration', array(
    'type' => 'blob',
    'size' => 'big',
    'serialize' => TRUE,
  ));

  // Rename pmid to payment_method_id and convert numeric IDs to entity names.
  db_change_field('payment', 'pmid', 'payment_method_id', array(
    'type' => 'varchar',
    'length' => 255,
  ));
  $names = db_select('payment_method', 'pm')
    ->fields('pm', array('pmid', 'name'))
    ->execute()
    ->fetchAllKeyed();
  foreach ($names as $pmid => $name) {
    db_update('payment')
      ->fields(array(
        'payment_method_id' => $name,
      ))
      ->condition('payment_method_id', $pmid)
      ->execute();
  }

  // Rename psiid_first to first_payment_status_id.
  db_change_field('payment', 'psiid_first', 'first_payment_status_id', array(
    'description' => "The {payment_status_item}.id of this payment's first status item.",
    'type' => 'int',
    'unsigned' => TRUE,
    'default' => 0,
    'not null' => TRUE,
  ));

  // Rename psiid_lastto last_payment_status_id.
  db_change_field('payment', 'psiid_last', 'last_payment_status_id', array(
    'description' => "The {payment_status_item}.id of this payment's most recent status item.",
    'type' => 'int',
    'unsigned' => TRUE,
    'default' => 0,
    'not null' => TRUE,
  ));

  // Rename uid to owner_id.
  db_change_field('payment', 'uid', 'owner_id', array(
    'description' => 'The {users}.uid this payment belongs to.',
    'type' => 'int',
    'not null' => TRUE,
    'default' => 0,
  ));

  // Add uuid.
  db_add_field('payment', 'uuid', array(
    'description' => 'Unique Key: Universally unique identifier for this entity.',
    'length' => 128,
    'not null' => FALSE,
    'type' => 'varchar',
  ));
  db_add_index('payment', 'uuid', array('uuid'));

  // Drop unnecessary fields.
  db_drop_field('payment_line_item', 'context_configuration');
  db_drop_field('payment_line_item', 'description');
  db_drop_field('payment_line_item', 'description_arguments');
}

/**
 * Upgrades payment line items to 8.x-2.x.
 */
function payment_update_8201(array &$sandbox) {
  // Rename pid to payment_id.
  db_drop_primary_key('payment_line_item');
  db_drop_index('payment_line_item', 'pid');
  db_change_field('payment_line_item', 'pid', 'payment_id', array(
    'description' => 'The {payment}.id this line item belongs to.',
    'type' => 'int',
    'not null' => TRUE,
    'default' => 0,
  ));
  db_add_index('payment_line_item', 'payment_id', array('payment_id'));
  db_add_primary_key('payment_line_item', array('name', 'payment_id'));

  // Add plugin_id to store the line item plugin type.
  db_add_field('payment_line_item', 'plugin_id', array(
    'type' => 'varchar',
    'length' => 255,
  ));

  // Drop unnecessary fields.
  db_drop_field('payment_line_item', 'description');
  db_drop_field('payment_line_item', 'description_arguments');
  db_drop_field('payment_line_item', 'tax_rate');
}

/**
 * Upgrades payment statuses to 8.x-2.x.
 */
function payment_update_8202(array &$sandbox) {
  db_rename_table('payment_status_item', 'payment_status');

  // Rename psiid to id. Add a temporary index in order to be able to drop and
  //re-add the primary key.
  db_add_index('payment_status', 'psiid', array('psiid'));
  db_drop_primary_key('payment_status');
  db_change_field('payment_status', 'psiid', 'id', array(
    'type' => 'serial',
  ), array(
    'primary key' => array('id'),
  ));
  db_drop_index('payment_status', 'psiid');

  // Rename pid to payment_id.
  db_change_field('payment_status', 'pid', 'payment_id', array(
    'description' => 'The payment ID.',
    'type' => 'int',
    'not null' => TRUE,
    'default' => 0,
  ));
  db_drop_index('payment_status', 'pid');
  db_add_index('payment_status', 'payment_id', array('payment_id'));

  // Rename status to plugin_id and update the column's values.
  db_change_field('payment_status', 'status', 'plugin_id', array(
    'type' => 'varchar',
    'length' => 255,
    'not null' => TRUE,
  ));
  foreach (payment_upgrade_map_status() as $old_status => $plugin_id) {
    db_update('payment_status')
      ->fields(array(
        'plugin_id' => $plugin_id,
      ))
      ->condition('plugin_id', $old_status)
      ->execute();
  }
}

/**
 * Upgrades payment methods to 8.x-2.x.
 */
function payment_update_8203(array &$sandbox) {
  $map = payment_upgrade_map_payment_method();
  $payment_methods_data = db_select('payment_method', 'pm')
    ->fields('pm')
    ->execute()
    ->fetchAllAssoc('name');
  $uuid = new Uuid();
  foreach ($payment_methods_data as $payment_method_data) {
    $plugin_id = isset($map[$payment_method_data->controller_class_name]) ? $map[$payment_method_data->controller_class_name] : '';
    \Drupal::config('payment.payment_method.' . $payment_method_data->name)
      ->set('id', $payment_method_data->name)
      ->set('label', $payment_method_data->title_specific)
      ->set('ownerId', $payment_method_data->uid)
      ->set('pluginConfiguration', array())
      ->set('pluginId', $plugin_id)
      ->set('status', $payment_method_data->enabled)
      ->set('uuid', $uuid->generate())
      ->save();
  }
  db_drop_table('payment_method');
}

/**
 * Maps payment statuses from 7.x-1.x to 8.x-2.x.
 *
 * @return array
 *   Keys are 7.x-1.x statuses. Values are 8.x-2.x status plugin IDs.
 */
function payment_upgrade_map_status() {
  return array(
    'payment_status_money_transferred' => 'payment_money_transferred',
    'payment_status_money_not_transferred' => 'payment_no_money_transferred',
    'payment_status_unknown' => 'payment_unknown',
    'payment_status_new' => 'payment_created',
    'payment_status_pending' => 'payment_pending',
    'payment_status_success' => 'payment_success',
    'payment_status_failed' => 'payment_failed',
    'payment_status_cancelled' => 'payment_cancelled',
    'payment_status_expired' => 'payment_expired',
    'payment_status_authorization_failed' => 'payment_authorization_failed',
  );
}

/**
 * Maps payment method plugins from 7.x-1.x to 8.x-2.x.
 *
 * @return array
 *   Keys are 7.x-1.x payment method controller names. Values are 8.x-2.x
 *   plugin IDs.
 */
function payment_upgrade_map_payment_method() {
  return array(
    'PaymentMethodControllerUnavailable' => 'payment_unavailable',
    'PaymentMethodBasicController' => 'payment_basic',
  );
}
